#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generateKeyMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0};
    int i, j, k = 0;

    for (i = 0; i < strlen(key); i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (!used[ch - 'A'] && isalpha(ch)) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }

    for (i = 0; i < 26; i++) {
        if (!used[i] && i != ('J' - 'A')) {
            matrix[k / SIZE][k % SIZE] = 'A' + i;
            k++;
        }
    }
}

void printMatrix(char matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}

void findPosition(char matrix[SIZE][SIZE], char ch, int* row, int* col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void preprocessText(char text[], char processedText[]) {
    int len = 0;
    for (int i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            processedText[len++] = toupper(text[i]);
        }
    }
    processedText[len] = '\0';

    for (int i = 0; i < len; i += 2) {
        if (processedText[i] == processedText[i + 1]) {
            for (int j = len; j > i + 1; j--) {
                processedText[j] = processedText[j - 1];
            }
            processedText[i + 1] = 'X';
            len++;
        }
    }
    if (len % 2 != 0) {
        processedText[len++] = 'X';
        processedText[len] = '\0';
    }
}

void encrypt(char matrix[SIZE][SIZE], char plaintext[], char ciphertext[]) {
    int row1, col1, row2, col2;
    int len = strlen(plaintext);
    for (int i = 0; i < len; i += 2) {
        findPosition(matrix, plaintext[i], &row1, &col1);
        findPosition(matrix, plaintext[i + 1], &row2, &col2);

        if (row1 == row2) {
            ciphertext[i] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            ciphertext[i] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }
    ciphertext[len] = '\0';
}

int main() {
    char key[100], plaintext[100], processedText[200], ciphertext[200];
    char matrix[SIZE][SIZE];

    printf("Enter the keyword: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    generateKeyMatrix(key, matrix);
    printf("\nKey Matrix:\n");
    printMatrix(matrix);

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    preprocessText(plaintext, processedText);
    printf("\nProcessed Text: %s\n", processedText);

    encrypt(matrix, processedText, ciphertext);
    printf("\nCiphertext: %s\n", ciphertext);

    return 0;
}
