#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define TOP_N 10

// Function to count letter frequencies in a text
void countFrequencies(const char *text, int *freq) {
    memset(freq, 0, ALPHABET_SIZE * sizeof(int));
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char c = tolower(text[i]);
            freq[c - 'a']++;
        }
    }
}

// Function to score a plaintext based on letter frequencies
double scoreText(const int *freq) {
    double score = 0.0;
    // Example frequencies for English letters (just a rough approximation)
    const double englishFreq[ALPHABET_SIZE] = {
        0.082, 0.015, 0.028, 0.043, 0.127, 0.022, 0.020, 0.061, 0.070, 0.001,
        0.005, 0.040, 0.024, 0.067, 0.077, 0.020, 0.001, 0.060, 0.063, 0.091,
        0.028, 0.010, 0.020, 0.001, 0.020, 0.002
    };
    int totalLetters = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        totalLetters += freq[i];
    }
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double observed = (double)freq[i] / totalLetters;
        score += observed * englishFreq[i];
    }
    return score;
}

// Function to substitute characters in the text based on a substitution key
void substituteText(const char *text, const char *key, char *output) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char base = islower(text[i]) ? 'a' : 'A';
            output[i] = key[tolower(text[i]) - 'a'];
            if (isupper(text[i])) {
                output[i] = toupper(output[i]);
            }
        } else {
            output[i] = text[i];
        }
    }
    output[strlen(text)] = '\0';  // Null-terminate the output string
}

// Function to perform a letter frequency attack on a monoalphabetic substitution cipher
void frequencyAttack(const char *ciphertext, int topN) {
    int freq[ALPHABET_SIZE];
    double scores[ALPHABET_SIZE * ALPHABET_SIZE];
    char plaintext[1024];  // Adjust size as needed
    char possiblePlaintexts[TOP_N][1024];
    char key[ALPHABET_SIZE + 1];
    int bestKeys[TOP_N];

    // Initialize arrays
    memset(scores, 0, sizeof(scores));

    // Generate all possible substitutions
    for (int k = 0; k < ALPHABET_SIZE * ALPHABET_SIZE; k++) {
        // Create a simple permutation key
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            key[i] = 'a' + i;
        }
        key[ALPHABET_SIZE] = '\0';

        // Apply permutation (basic example, more sophisticated permutations can be used)
        int a = k / ALPHABET_SIZE;
        int b = k % ALPHABET_SIZE;
        char temp = key[a];
        key[a] = key[b];
        key[b] = temp;

        // Substitute text using the permutation key
        substituteText(ciphertext, key, plaintext);
        countFrequencies(plaintext, freq);
        double score = scoreText(freq);
        scores[k] = score;
    }

    // Find the top N scores
    for (int i = 0; i < topN; i++) {
        double maxScore = -1.0;
        int bestIndex = -1;
        for (int k = 0; k < ALPHABET_SIZE * ALPHABET_SIZE; k++) {
            if (scores[k] > maxScore) {
                maxScore = scores[k];
                bestIndex = k;
            }
        }
        // Store the best key and its score
        if (bestIndex != -1) {
            int a = bestIndex / ALPHABET_SIZE;
            int b = bestIndex % ALPHABET_SIZE;
            key[a] = 'a' + b;
            key[b] = 'a' + a;
            substituteText(ciphertext, key, possiblePlaintexts[i]);
            bestKeys[i] = bestIndex;
            scores[bestIndex] = -1.0;  // Mark as used
        }
    }

    // Output the top N possible plaintexts
    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN; i++) {
        printf("Plaintext %d: %s\n", i + 1, possiblePlaintexts[i]);
    }
}

int main() {
    const char *ciphertext = "your ciphertext here";  // Replace with actual ciphertext
    int topN = TOP_N;  // Number of top possible plaintexts to display

    frequencyAttack(ciphertext, topN);

    return 0;
}
