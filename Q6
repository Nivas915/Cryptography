#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define ALPHABET_SIZE 26

int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

void breakAffineCipher(char ciphertext[], char *key) {
    int freq[ALPHABET_SIZE] = {0};
    int i;

    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            freq[toupper(ciphertext[i]) - 'A']++;
        }
    }

    int mostFreq1 = -1, mostFreq2 = -1;
    int maxCount1 = 0, maxCount2 = 0;

    for (i = 0; i < ALPHABET_SIZE; i++) {
        if (freq[i] > maxCount1) {
            maxCount2 = maxCount1;
            mostFreq2 = mostFreq1;
            maxCount1 = freq[i];
            mostFreq1 = i;
        } else if (freq[i] > maxCount2) {
            maxCount2 = freq[i];
            mostFreq2 = i;
        }
    }

    int freq1 = mostFreq1;
    int freq2 = mostFreq2;
    int plaintext1 = 'E' - 'A';
    int plaintext2 = 'T' - 'A';

    for (int a = 1; a < ALPHABET_SIZE; a++) {
        if (modInverse(a, ALPHABET_SIZE) != -1) {
            for (int b = 0; b < ALPHABET_SIZE; b++) {
                int k1 = (freq1 - b + ALPHABET_SIZE) % ALPHABET_SIZE;
                int k2 = (freq2 - b + ALPHABET_SIZE) % ALPHABET_SIZE;

                if (((k1 * modInverse(a, ALPHABET_SIZE)) % ALPHABET_SIZE) == plaintext1 &&
                    ((k2 * modInverse(a, ALPHABET_SIZE)) % ALPHABET_SIZE) == plaintext2) {
                    printf("Possible values for a and b: a = %d, b = %d\n", a, b);
                    return;
                }
            }
        }
    }
}

int main() {
    char ciphertext[100], key[2];
    
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';
    
    breakAffineCipher(ciphertext, key);
    
    return 0;
}
