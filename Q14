#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to encrypt plaintext using one-time pad Vigen√®re cipher
void encryptVigenere(const char *plaintext, const int *key, int keyLength, char *ciphertext) {
    int textLength = strlen(plaintext);
    for (int i = 0; i < textLength; i++) {
        if (isalpha(plaintext[i])) {
            int shift = key[i % keyLength];
            char base = islower(plaintext[i]) ? 'a' : 'A';
            ciphertext[i] = ((plaintext[i] - base + shift) % ALPHABET_SIZE) + base;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[textLength] = '\0';  // Null-terminate the ciphertext string
}

// Function to find the key for decryption based on ciphertext and target plaintext
void findKeyForDecryption(const char *ciphertext, const char *plaintext, int *key, int keyLength) {
    int textLength = strlen(ciphertext);
    for (int i = 0; i < textLength; i++) {
        if (isalpha(ciphertext[i])) {
            int shift = (ciphertext[i] - plaintext[i] + ALPHABET_SIZE) % ALPHABET_SIZE;
            key[i % keyLength] = shift;
        }
    }
}

int main() {
    // Part (a): Encryption
    char plaintext[] = "send more money";
    int key[] = {9, 0, 1, 7, 23, 15, 21, 14, 11, 11, 2, 8, 9};
    int keyLength = sizeof(key) / sizeof(key[0]);
    char ciphertext[sizeof(plaintext)];

    encryptVigenere(plaintext, key, keyLength, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    // Part (b): Decryption Key Recovery
    char targetPlaintext[] = "cash not needed";
    int recoveredKey[sizeof(key)];
    memset(recoveredKey, 0, sizeof(recoveredKey));  // Initialize key array

    findKeyForDecryption(ciphertext, targetPlaintext, recoveredKey, keyLength);

    printf("Recovered Key: ");
    for (int i = 0; i < keyLength; i++) {
        if (i < strlen(ciphertext)) {
            printf("%d ", recoveredKey[i]);
        }
    }
    printf("\n");

    return 0;
}
